#!/usr/bin/env python3
# coding=utf8

# Copyright  2021  Jiayu DU

import sys
import argparse
import json

import logging
logging.basicConfig(stream=sys.stderr, level=logging.INFO, format='[%(levelname)s] %(message)s')

DEBUG = None

def GetEditType(ref_token, hyp_token):
    if ref_token == None and hyp_token != None:
        return 'I'
    elif ref_token != None and hyp_token == None:
        return 'D'
    elif ref_token == hyp_token:
        return 'C'
    elif ref_token != hyp_token:
        return 'S'
    else:
        raise RuntimeError


class LatticeState:
    def __init__(self):
        self.score = -float('inf')
        # backpointer
        self._x = None
        self._y = None

class LatticeArc:
    def __init__(self, src, dst, ref, hyp):
        self.src = src
        self.dst = dst
        self.ref = ref
        self.hyp = hyp
        self.edit = GetEditType(ref, hyp)


def EditDistance(
    I,
    O,
    SUB = lambda T1, T2: 0 if (T1 == T2) else -1.0,
    INS = lambda T: -1.0,
    DEL = lambda T: -1.0,
):
    assert(len(I) != 0)
    def print_lattice(S, X, Y, fstream):
        print(file=fstream)
        for x in range(X):
            for y in range(Y):
                print(F'[{x},{y}]:{S[x][y].score:4.3f}:({S[x][y]._x},{S[x][y]._y}) ', end='', file=fstream)
            print(file=fstream)

    # Construct a (X * Y) search lattice
    X = len(I) + 1
    Y = len(O) + 1
    S = [ [ LatticeState() for _ in range(Y) ] for _ in range(X) ] # indexing system: S[x][y]

    # init origin
    s = S[0][0]
    s.score = 0.0
    s._x, s._y = None, None

    # init x-axis
    for x in range(1, X):
        s = S[x][0]
        s.score = S[x-1][0].score + DEL(I[x-1])
        s._x, s._y = x-1, 0

    # init y-axis
    for y in range(1, Y):
        s = S[0][y]
        s.score = S[0][y-1].score + INS(O[y-1])
        s._x, s._y = 0, y-1

    for x in range(1, X):
        for y in range(1, Y):
            s = S[x][y]

            score = S[x-1][y-1].score + SUB(I[x-1], O[y-1])
            if score >= s.score:
                s.score = score
                s._x, s._y = x-1, y-1

            score = S[x-1][y].score + DEL(I[x-1])
            if score >= s.score:
                s.score = score
                s._x, s._y = x-1, y

            score = S[x][y-1].score + INS(O[y-1])
            if score >= s.score:
                s.score = score
                s._x, s._y = x, y-1

    if DEBUG:
        print_lattice(S, X, Y, sys.stderr)

    # Backtracing best alignment path, i.e. a list of arcs
    # arc = (src, dst, i, o, edit)
    # src/dst = (x, y), where x/y refers to search grid state-id along x/y axis
    best_score = S[-1][-1].score
    best_state = (X-1, Y-1)

    best_path = []
    x, y = best_state[0], best_state[1]
    _x, _y = S[x][y]._x, S[x][y]._y
    score = S[x][y].score
    # loop invariant:
    #   1. (_x, _y) -> (x, y) is a "forward arc" on best alignment path
    #   2. score is the value of point(x, y) on DP search grid
    while _x != None or _y != None:
        src = (_x, _y)
        dst = (x, y)
        if (x == _x + 1 and y == _y + 1): # Substitution or correct
            arc = LatticeArc(src, dst, I[_x], O[_y])
        elif (x == _x + 1 and y == _y): # Deletion
            arc = LatticeArc(src, dst, I[_x], None)
        elif (x == _x and y == _y + 1): # Insertion
            arc = LatticeArc(src, dst, None, O[_y])
        else:
            raise RuntimeError
        best_path.append(arc)
        x, y = _x, _y
        _x, _y = S[x][y]._x, S[x][y]._y
        score = S[x][y].score

    best_path.reverse()
    return (best_path, best_score)


def PrettyPrintAlignment(alignment, stream = sys.stderr):
    def token_repr(token):
        return token if token else '*'

    def edit_repr(edit):
        return '' if edit == 'C' else edit

    def display_width(token: str):
        def char_width(c):
            return 2 if (c >= '\u4e00') and (c <= '\u9fa5') else 1
        return sum([ char_width(c) for c in token ])

    H = '  HYP  : '
    R = '  REF  : '
    E = '  EDIT : '
    for arc in alignment:
        h, r, e = token_repr(arc.hyp), token_repr(arc.ref), edit_repr(arc.edit)
        nh, nr, ne = display_width(h), display_width(r), display_width(e)
        n = max(nh, nr, ne) + 1

        H += h + ' ' * (n-nh)
        R += r + ' ' * (n-nr)
        E += e + ' ' * (n-ne)

    print(H, file=stream)
    print(R, file=stream)
    print(E, file=stream)


def CountEdits(alignment):
    c, s, i, d = 0, 0, 0, 0
    for arc in alignment:
        if arc.edit == 'C':
            c += 1
        elif arc.edit == 'S':
            s += 1
        elif arc.edit == 'I':
            i += 1
        elif arc.edit == 'D':
            d += 1
        else:
            raise RuntimeError
    return (c, s, i, d)


def ComputeTokenErrorRate(c, s, i, d):
    assert((c + s + d) != 0)
    num_edits = (s + d + i)
    ref_len = (c + s + d)
    hyp_len = (c + s + i)
    return 100.0 * num_edits / ref_len, 100.0 * num_edits / max(ref_len, hyp_len)


def ComputeSentenceErrorRate(num_err_utts, num_utts):
    assert(num_utts != 0)
    return 100.0 * num_err_utts / num_utts


class ErrorStats:
    def __init__(self):
        self.refs = 0
        self.hyps = 0
        self.hyp_without_ref = 0
        self.hyp_with_empty_ref = 0

        self.utts = 0 # seen in both ref & hyp

        self.C = 0
        self.S = 0
        self.I = 0
        self.D = 0

        self.token_error_rate = 0.0
        self.modified_token_error_rate = 0.0

        self.utts_with_error = 0
        self.sentence_error_rate = 0.0

    def to_json(self):
        return json.dumps(self.__dict__)

    def to_kaldi(self):
        return (
            F'%WER {self.token_error_rate:.2f} [ {self.S + self.D + self.I} / {self.C + self.S + self.D}, {self.I} ins, {self.D} del, {self.S} sub ]\n'
            F'%SER {self.sentence_error_rate:.2f} [ {self.utts_with_error} / {self.utts} ]\n'
        )

    def to_summary(self):
        #return json.dumps(self.__dict__, indent=4)
        summary = (
            '==================== Overall Error Statistics ====================\n'
            F'refs: {self.refs}\n'
            F'hyps: {self.hyps}\n'
            F'hyp_without_ref: {self.hyp_without_ref}\n'
            F'hyp_with_empty_ref: {self.hyp_with_empty_ref}\n'
            F'utts: {self.utts}\n'
            F'tokens: {self.C + self.S + self.D:>7}\n'
            F'edits:  {self.S + self.I + self.D:>7}\n'
            F'- COR:  {self.C:>7}\n'
            F'- SUB:  {self.S:>7}\n'
            F'- INS:  {self.I:>7}\n'
            F'- DEL:  {self.D:>7}\n'
            F'TER:  {self.token_error_rate:.2f}%\n'
            F'mTER: {self.modified_token_error_rate:.2f}%\n'
            F'SER:  {self.sentence_error_rate:.2f}%\n'
            '============================================================\n'
        )
        return summary


def LoadKaldiArc(filepath):
    utts = {}
    with open(filepath, 'r', encoding='utf8') as f:
        for line in f:
            cols = line.strip().split(maxsplit=1)
            if len(cols) == 1 or len(cols) == 2:
                key  = cols[0].strip()
                text = cols[1].strip() if len(cols) == 2 else ''
                if key not in utts:
                    utts[key] = text
                else:
                    raise RuntimeError(F'Found duplicated utterence, key={key}')
    return utts


def GenerateTokenizer(tokenizer_type):
    if tokenizer_type == 'whitespace':
        def word_tokenizer(text):
            return text.strip().split()
        tokenizer = word_tokenizer
    elif tokenizer_type == 'char':
        def char_tokenizer(text):
            return [ c for c in text.strip().replace(' ', '') ]
        tokenizer = char_tokenizer
    else:
        raise RuntimeError
    return tokenizer


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--tokenizer', choices=['whitespace', 'char'], default='whitespace', help='whitespace for WER, char for CER')
    parser.add_argument('--logk', type=int, default=500 , help='whitespace for WER, char for CER')
    parser.add_argument('-x', '--ref', type=str, required=True, help='input reference file')
    parser.add_argument('-y', '--hyp', type=str, required=True, help='input hypothesis file')
    parser.add_argument('result', type=str)
    args = parser.parse_args()
    logging.info(args)

    logging.info('Generating tokenizer ...')
    tokenizer = GenerateTokenizer(args.tokenizer)
    assert(tokenizer)

    logging.info('Loading REF and HYP ...')
    refs = LoadKaldiArc(args.ref)
    hyps = LoadKaldiArc(args.hyp)
    stats = ErrorStats()

    # check valid utterances in hyp that have matched non-empty reference
    stats.hyp_without_ref = 0
    utts = []
    for utt in sorted(hyps.keys()):
        if utt in refs: # TODO: efficiency
            if refs[utt]: # non-empty reference
                utts.append(utt)
            else:
                stats.hyp_with_empty_ref += 1
                logging.warning(F'Found {utt} with empty reference, skipping...')
        else:
            stats.hyp_without_ref += 1
            logging.warning(F'Found {utt} without reference, skipping...')

    stats.hyps = len(hyps)
    stats.refs = len(refs)
    stats.utts = len(utts)

    logging.info('Evaluating ...')
    ndone = 0
    with open(args.result, 'w+', encoding='utf8') as fo:
        for utt in utts:
            alignment, score = EditDistance(
                tokenizer(refs[utt]),
                tokenizer(hyps[utt]),
            )
            c, s, i, d = CountEdits(alignment)
            ter, mter = ComputeTokenErrorRate(c, s, i, d)

            if ter > 0:
                stats.utts_with_error += 1

            # utt-level evaluation result
            print(F'{{"utt":{utt}, "score":{score}, "TER":{ter:.2f}, "mTER":{mter:.2f}, "cor":{c}, "sub":{s}, "ins":{i}, "del":{d}}}', file=fo)
            PrettyPrintAlignment(alignment, fo)

            stats.C += c
            stats.S += s
            stats.I += i
            stats.D += d

            ndone += 1
            if ndone % args.logk == 0:
                logging.info(f'{ndone:7d} utts evaluated.')
        logging.info(f'{ndone:7d} utts evaluated in total.')

        # corpus level evaluation result
        stats.token_error_rate, stats.modified_token_error_rate = ComputeTokenErrorRate(stats.C, stats.S, stats.I, stats.D)
        stats.sentence_error_rate = ComputeSentenceErrorRate(stats.utts_with_error, stats.utts)

        print(stats.to_summary(), file=fo)

    print(stats.to_json())
    print(stats.to_kaldi())
    print(stats.to_summary())

